Instruction Set Architecture (ISA)
  Couche d'abstraction vis-à-vis d'une famille de processus.

Micro-Architecture = technique d'implémentation d'une ISA.

Deux style d'ISA : 
  - RISC (Reduced Instruction Set Computer)
  - CISC (Complex Instruction Set Computer)

RISC :
  * Petit nombre d'instruction orthogonales
  * Disctinction arithmétique et mémoire
  * ...

CISC : tout ce uqi n'est pas RISC.

x86-64 est CISC.

Notre étude : x86-64.

Avantage : Répandu, rétrocompatible, performant.
Inconvénients : Complexe, baroque.

Etat du processeur :
  * registres
  * mémoire, dont la pile
(On suit la syntaxe de l'assembleur GNU)

Registres entiers 64 bits :
%rax, %rdx, %rcx, %rdx, %rbp, %rsp, %rdi, %rsi, %r8...%r15

little endian - petit boutien

63               31        15               0
%rax             %eax[     %ax[%ah;%al]     ]

%rip : compteur de programme
%rflags : champs de bits; information sur les résultats arythémtique

{
 Offset (base, index, scale)
 Memoire [OFFSET + BASE + INDEX + SCALE]
  ou
  Memoire [OFFSET(base, index, scale) + BASE + INDEX + SCALE]
}

OFFSET(BASE, INDEX, SCALE)
immédiat(registre, registre optionnel, nombre {1,2,4,8} optionnel)

Memoire[OFFSET + BASE + INDEX + SCALE]

Transfere Memoire
mov SRC, DST
movq
movl
movw
mob

Suffix   Taille
b         8
w         16
l         32
q         64

movq $42, %rax        # %rax <- 42
movq %rdx, -8(%rsp)  # Mem[%rsp - 8] <- %rbx

Pointeur de pile : %rsp

Pile en x86-64 //System V 
%rsp
Croit vers la base
Aligné sur 8 octets
%rbp : pointeur de cadre (frame pointeur)

push SRC

pushq %rax
          |--| pushq %rax |----|
%rsp ->   |--|    =>      |%rax|
                  <=
                popq %rax

pusq %rax 
<==> 
subq $8, %rsb
movq %rax, (%rsp)
<==>
movq %rax, -8(%rsp)
subq $8, %rsp

RFLAGS :
Bit                    Signification                    Mnemonique
0                       retenue                           CF
1                       parité                            PF
6                       zéro                              ZF
7                       signe(1 = négatif)                SF
11                      overflow                          OF

comq SRC1, SRC2
Calcul SRC2 - SRC1, met à jour RFLAGS, jette le résultat
cpm %rbx, %rax
je foo

jmp *%rax 

Chaque call il faut que %rsp+8 soit aligné sur 16 octets.

pushq %rbp
mov %rsp, %rdp
qubq $16, %rsp
...
movq %rax, -8(%rbp)
...
addq $16, %rsp
popq %rbp
ret


Cours 3 :
Fopix :
  * langage à base d'expressions (notamment court-circuit)
  * Float de controle structuré (par ex : while)
  * Déclaration local

Retrolix :
  * Manipule des registres matériels
  * Respecteles conventio d'appelle x86-64/System V.

 1 - (3 * 4)

locals r, x1, x2, x3;

x3 <- copy 4;
x2 <- copy 3;
x2 <- mul x2, x3
x1 <- copy 1;
x1 <- sub x1, x2;
r <- copy x1 n

x >= 0

locals r, x:
  r00 <- copy x;
  r01 <- copy 0;
  jumpif gte r00, r01 -> l0, l1;
  l0 : r <- 1
  jump l2;
  l1 : r <- copy 0;
  l2 : ...

if x = 0 then 0 else y / x

locals r, r0, r1, r2 :
  r0 <- copy x;
  r1 <- copy 0;
  r2 <- copy y;
  jumpif eq r0, r1 -> l0, l1
  l0 : r <- copy 0;
  jump l2;
  l1 : r <- div y, x;
  l2 : ...

while (x[0] >= 0) (x[0] := x[0] - 1); x[0]



let rec expression e dst = match e with
  | ...
  | FunCall ("`+", [srcl; srcr]) ->
    let dstl = fresh() in
    let dstr = fresh() in
    expression srcl dstl ++
    expression srcl dstr ++
    [Assign(dst, Add, [dstl;dstr])] 


Cours 4:

let f0 z =
  let y = z * 2 in
  fun x -> x + y + z

#defin as_int(x,i) ((int*)x)[i]

typedef void* any_t;


any_int (int x) {
  any_t a = (int* )malloc (sizeof(int));
  as_int (a, 0) = x;
  return a;
}

typedef any_t (*function_ptr_t) (any_t args);

typedef struct closure {
  any_t* free_varaibles;
  function_ptr_t code;
} closure_t;


any_t g_code(closure_t* close, any_t x) {
  return as_int(x, 0) + as_int(close->free_varaibles, 0) + as_int(close->free_varaibles, 1);
}

any_t f0 (closure_t close, any_t z) {
  int y = ((int *) z)[0] * 2;
  closure_t* c = (closure_t*) malloc (sizeof (closure_t));
  c-> code = g_code;
  c->free_varaibles = (any_t*) malloc (sizeof (any_t) * 2);
  c->free_varaibles[0] = any_int (y);
  c->free_varaibles[1] = z;
  return c;
}

int main() {
  closure_t* f0 = (closure_t*) malloc (sizeof (closure_t));
  f0->code = f0_code;

  closure_t* h = f0->code (f0, any_int(3));
  printf("%d\n", as_int (h->code(h->code (h, any_int(4)))));
  exit(EXIT_SUCCESS);
}