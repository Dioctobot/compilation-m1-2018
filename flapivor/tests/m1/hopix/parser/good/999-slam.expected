val x = 0
val f = fun (x) => x
def g (x) = x 
def h (x, y) = (`+` (x, i (y))) and i (z) = (h (z, z))
def `++ (x, y) = (`+` (x, y)) 
def `** (x, y) = (`+` (x, y)) 
def prefix (x) = (`**` (`+` (`++ (x, x), x), x)) 
def arithmetic
  (x, y, z) =
  (`+`
  (`+` (`+` (x, `*` (y, z)), `*` (`+` (x, y), z)),
  `*` (z, `+` (x, y))))

val some_Int = 12345
val some_other_Int = 3405691582
val some_other_other_Int = 1354
val yet_another_Int = 30344
val some_char = 'a'
val some_other_char = '@'
val some_other_other_char = '\170'
val yet_another_char = '\t'
val some_String =
  "N'oubliez pas, car votre vie en d\233pend. Ne clignez pas des yeux. N'y pensez m\234me pas. Clignez et vous \234tes morts. Ils sont rapides, bien plus rapides que vous ne le croyez. Ne leur tournez pas le dos. Ne regardez pas ailleurs. Et surtout, ne clignez pas. Bonne chance."
val some_other_String =
  "\n\n\t Le Docteur : Vous avez d\233truit l'inscription la plus ancienne de l'univers.\n\n\t River Song : Tu m'y as oblig\233e, tu ne r\233pondais pas au t\233l\233phone.\n\nOups\b\r\n"
val yet_another_String = "Say \"Hello!\""
type IntList =
  INil  | ICons (Int, IntList) 
type List<a> =
  Nil  | Cons (a, List<a>) 
type LList<a> =
  LNil  | LCons (a, Unit -> LList<a>) 
type MartheExp =
  EInt (Int)
   | EAdd (MartheExp, MartheExp)
   | ESum (MartheExp, MartheExp)
   | EVar (String)
   | ESum (String, MartheExp, MartheExp, MartheExp)
  
type `<a, b> =
  ` (a, b) 
type Box =
  {what_s_in_the_box : Int }
type Person =
  {name : String  ; age : Int }
type Closure<env, a, b> =
  {code : env  * a -> b  ; env : env }
type ContainerFunctions<e, c, b> =
  {map : (e -> a)  * c -> c
   ; fold : (e -> Unit)  * c -> Unit
   ; weird : e -> (c  * e -> b)
  }
type Unit =
  Unit 
val `! = Unit
val id : forall a.a -> a = fun (x) => x
val id_Int = id < Int >
val stable = id < Int > (37)
val compose : forall a, b, c.(a -> b)  * (b -> c) -> (a -> c) =
  fun (f, g) => (fun (x) => (f (g (x)) : c))
val id_id_id = compose < Int, Int, Int > (id, id)
val id_id_id_2 =
  compose < (Int -> Int), (Int -> Int), (Int -> Int) > (id, id)
val an_empty_list = Nil < int >
val a_cool_list =
  Cons < int >(1, Cons < int >(1, an_empty_list))
val a_person = {name = "Luke"; age = 28}
val a_name = a_person.name
val main =
  (start_with_this (`!));
  ((do_that ("foo", "bar"));
  (conclude (`!)))
val computation = val y = 42 ; val z = 13 ; compute (`!)
def len : forall a.List<a> -> Int
  (l) =
  (case l {
  | Nil < a > => 0
  | Cons < a >(x, xs) => (`+` (1, len < a > (xs)))
  })

def fact
  (n) =
  (if (`=?` (n, 0)) then(1)
  else
  (if (`=?` (n, 1)) then(1)
  else
  (if (`=?` (n, 2)) then(2)
  else
  (`*` (fact (`-` (n, 1)), n)))))

def ifact
  (n) =
  (val accu = (ref 1) ;
  val k = (ref n) ;
  while
    (`>?` (! k, 0))
    { (accu := `*` (! accu, ! k)); (k := `-` (! k, 1)) };
  (! accu))

def ifact2
  (n) =
  (val accu = (ref 1) ;
  for k = 1 to n { accu := `*` (! accu, k) }; (! accu))

