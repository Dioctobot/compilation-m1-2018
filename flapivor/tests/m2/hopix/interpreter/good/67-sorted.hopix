def concat (l1, l2) =
  case l1 {
  | N => l2
  | C (x, xs) => C (x, concat (xs, l2))
  }

val l = C (1, C (2, N))
val l = concat (l, l)
val l = concat (l, l)
val l = concat (l, l)
val l = concat (l, l)
val l = concat (l, l)
val l = concat (l, l)

def len (l) =
  case l {
  | N => 0
  | C (x, xs) => 1 + len (xs)
  }

def sorted (l) =
  case l {
  | N | C (_, N) => true
  | C (x, C (y, _) & l) => x <=? y && sorted (l)
  }

val l2 = C (1, C (2, C (6, C (7, N))))

val l3 = C (-1, C (2, C (6, C (70, N))))

val l4 = C (-1, C (20, C (6, C (70, N))))

def not (b) = if b then false else true

val r =
  not (sorted (l)) &&
  sorted (l2) &&
  sorted (l3) &&
  not (sorted (l4))

val test =
  print_string ("This test is ");
  print_string (if r then "OK!\n" else "KO!\n")


