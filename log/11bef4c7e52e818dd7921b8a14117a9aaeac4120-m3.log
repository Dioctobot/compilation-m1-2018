make: Entering directory '/home/opam/source/flap/tests/m3'
make[1]: Entering directory '/home/opam/source/flap/tests/m3/hopix/typechecker/bad'
========================================================
In typechecker/bad
GOOD: 0/0
[XFAIL]  01-unbound-variable.hopix

INPUT: 
val main : Int = x
OUTPUT: 
Line 1, characters 17-18: Error (typechecking)
  check_variable_is_fully_annotated is not fully annotated
--------------------------------------------------------
[XFAIL]  02-variable-in-another-scope.hopix

INPUT: 
val y : Int =
    val x : Int = 0;
    x
val main : Int = x
OUTPUT: 
Line 2, characters 4-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  03-variable-with-another-type.hopix

INPUT: 
val y : Int =
    val x : Int = 0;
    x

val main : String = y
OUTPUT: 
Line 2, characters 4-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  04-invalid-arithmetic-operation.hopix

INPUT: 
val main : Int = "" + 0
OUTPUT: 
Line 1, characters 18-23: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  05-invalid-arithmetic-operation-02.hopix

INPUT: 
val main : Int = "" * 0
OUTPUT: 
Line 1, characters 18-23: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  06-invalid-arithmetic-operation-03.hopix

INPUT: 
val main : Int = "" / 0
OUTPUT: 
Line 1, characters 18-23: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  07-invalid-arithmetic-operation-04.hopix

INPUT: 
val main : Int = "" - 0
OUTPUT: 
Line 1, characters 18-23: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  08-invalid-arithmetic-operation-05.hopix

INPUT: 
val main : Int = 0 - 0 + ""
OUTPUT: 
Line 1, characters 17-27: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  09-invalid-arithmetic-comparison.hopix

INPUT: 
val main : Int = 0 >? ""
OUTPUT: 
Line 1, characters 17-24: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  10-invalid-arithmetic-comparison-02.hopix

INPUT: 
val main : Int = 0 <? ""
OUTPUT: 
Line 1, characters 17-24: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  11-invalid-arithmetic-comparison-03.hopix

INPUT: 
val main : Int = 0 <=? ""
OUTPUT: 
Line 1, characters 17-25: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  12-invalid-arithmetic-comparison-04.hopix

INPUT: 
val main : Int = 0 >=? ""
OUTPUT: 
Line 1, characters 17-25: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  13-invalid-arithmetic-comparison-05.hopix

INPUT: 
val main : Int = 0 =? ""
OUTPUT: 
Line 1, characters 17-24: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  14-invalid-arithmetic-comparison-06.hopix

INPUT: 
val main : Int = 0 <? (1 <? 2)
OUTPUT: 
Line 1, characters 17-30: Error (typechecking)
  Apply : Not fully annoted
--------------------------------------------------------
[XFAIL]  15-invalid-function-call.hopix

INPUT: 
def f : Int -> Int (x) = x

val main : Int = f (0, 1)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  16-invalid-function-call-02.hopix

INPUT: 
def f : Int * Int -> Int (x) = x

val main : Int = f (0)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  17-invalid-function-call-03.hopix

INPUT: 
def f : String -> Int (x) = x

val main : Int = f (0)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  18-invalid-function-call-04.hopix

INPUT: 
def f : String -> Int (x) = x

val main : String = f ("The Master")
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  19-invalid-function-call-05.hopix

INPUT: 
def f : (String -> String) -> Int (x) = x

val main : String = f (((fun (x) => 0) : String -> Int))
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  20-invalid-function-call-06.hopix

INPUT: 
def f : Int -> Int (x) = f("This is wrong!")

OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  21-invalid-function-call-07.hopix

INPUT: 
def f : Int -> String (x) = f (31) + 0
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  22-invalid-function-call-08.hopix

INPUT: 
def f : forall a. a -> a (x) = f<Int> (x)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  23-invalid-function-call-09.hopix

INPUT: 
def f : forall a. Int -> a (x) = f<Int> (x)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  24-invalid-function-call-10.hopix

INPUT: 
def g : Int -> Int (x) = f(x)
and f : String -> Int (x) = g(x)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  25-invalid-function-call-11.hopix

INPUT: 
def g : Int -> Int (x) = f(x)
and f : Int -> String (x) = g(x)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  26-invalid-function-call-12.hopix

INPUT: 
def apply : forall a, b. (a -> b) * b -> b (f, x) = f (x)


OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
--------------------------------------------------------
[XFAIL]  27-record-01.hopix

INPUT: 
val x : T = { l = 0 }<>
OUTPUT: 
Line 1, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  28-record-02.hopix

INPUT: 
type T = { k : Int }

val x : T = { l = 0 }<>
OUTPUT: 
Line 3, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  29-record-03.hopix

INPUT: 
type T = { l : String }

val x : T = { l = 0 }<>
OUTPUT: 
Line 3, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  30-record-04.hopix

INPUT: 
type T<a> = { l : a }

val x : T<String> = { l = 0 }<String>
OUTPUT: 
Line 3, characters 20-37: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  31-record-05.hopix

INPUT: 
type T = { l : Int }

val r : T = { l = 0; l = 1 }<>
OUTPUT: 
Line 3, characters 12-30: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  32-record-06.hopix

INPUT: 
type T = { l : Int; x : Int }

val r : T = { l = 0 }<>
OUTPUT: 
Line 3, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  33-record-07.hopix

INPUT: 
type T = { l : Int }

val r : T = { l = 0; x = 0 }<>
OUTPUT: 
Line 3, characters 12-30: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  34-record-matching-01.hopix

INPUT: 
type T = { x : Int }

val main : String = case { x = 0 }<> { { x = (y : Int) }<> => y }
OUTPUT: 
Line 3, characters 20-65: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  35-record-matching-02.hopix

INPUT: 
type T = { x : Int }

val main : String = case { x = 0 }<> { { x = (y : String) }<> => y }
OUTPUT: 
Line 3, characters 20-68: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  36-record-matching-03.hopix

INPUT: 
type T = { x : Int }

val main : String = case { x = 0 }<> { { z = (y : String) }<> => y }
OUTPUT: 
Line 3, characters 20-68: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  37-record-matching-04.hopix

INPUT: 
type T = { x : Int }
type U = { z : Int }

val main : Int = case { x = 0 }<> { { z = (y : Int) }<> => y }
OUTPUT: 
Line 4, characters 17-62: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  38-record-matching-05.hopix

INPUT: 
type T = { x : Int }

val main : Int = case { x = 0 }<> { { x = (_ : Int); y = (z : Int) }<> => z }
OUTPUT: 
Line 3, characters 17-77: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  39-record-matching-06.hopix

INPUT: 
type T<a> = { x : a }

val main : Int = case { x = 0 }<Int> { { x = (_ : String) }<String> => 0 }
OUTPUT: 
Line 3, characters 17-74: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  40-record-matching-07.hopix

INPUT: 
type T<a> = { x : a }

val main : Int = case { x = 0 }<Int> { { x = (_ : String) }<Int> => 0 }
OUTPUT: 
Line 3, characters 17-71: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  41-record-matching-08.hopix

INPUT: 
type T<> = { x : Int }

val main : Int = case { x = 0 }<Int> { { x = (_ : String) }<Int> => 0 }
OUTPUT: 
Global Error (during parsing)
  Syntax error.
--------------------------------------------------------
[XFAIL]  42-record-field-01.hopix

INPUT: 
type T = { x : Int }

val r : T = { x = 0 }<>

val ry : Int = r.y
OUTPUT: 
Line 3, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  43-record-field-02.hopix

INPUT: 
type T = { x : Int }

val r : T = { x = 0 }<>

val ry : String = r.x
OUTPUT: 
Line 3, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  44-record-field-03.hopix

INPUT: 
type T = { x : Int }

type U = { y : Int }

val r : T = { x = 0 }<>

val ry : Int = r.y
OUTPUT: 
Line 5, characters 12-23: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  45-constructor-01.hopix

INPUT: 
val main : Int = A<>



OUTPUT: 
Line 1, characters 17-20: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  46-constructor-02.hopix

INPUT: 
type T = A

val main : Int = A<> (1)



OUTPUT: 
Line 3, characters 17-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  47-constructor-03.hopix

INPUT: 
type T = A (Int)

val main : Int = A<>



OUTPUT: 
Line 3, characters 17-20: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  48-constructor-04.hopix

INPUT: 
type T<a> = A (a)

val main : T<Int> = A<> (0)
OUTPUT: 
Line 3, characters 20-27: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  49-constructor-05.hopix

INPUT: 
type T = A (Int)

val main : T = A<Int> (0)
OUTPUT: 
Line 3, characters 15-25: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  50-constructor-06.hopix

INPUT: 
type T<a> = A(a)

val main : T<Int> = A<Int>("Wrong!")
OUTPUT: 
Line 3, characters 20-36: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  51-constructor-07.hopix

INPUT: 
type T<a> = A(a, a)

val main : T<Int> = A<Int>(0, "String")
OUTPUT: 
Line 3, characters 20-39: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  52-constructor-08.hopix

INPUT: 
type L = N | C (Int, L)

val main : L = C<> (1, C<> (2, "N"))
OUTPUT: 
Line 3, characters 15-36: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  53-constructor-matching-01.hopix

INPUT: 
type T = A

val main : Int = case A<> { B<> => 0 }
OUTPUT: 
Line 3, characters 17-38: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  54-constructor-matching-02.hopix

INPUT: 
type T = A

type U = B

val main : Int = case A<> { B<> => 0 }
OUTPUT: 
Line 5, characters 17-38: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  55-constructor-matching-03.hopix

INPUT: 
type T = A | B (Int)

val main : Int = case A<> { B<> => 0 }
OUTPUT: 
Line 3, characters 17-38: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  56-constructor-matching-04.hopix

INPUT: 
type T = A (Int, Int)

val main : Int = case A<>(1, 2) { A<>(x : Int, x : Int) => x }
OUTPUT: 
Line 3, characters 17-62: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  57-constructor-matching-05.hopix

INPUT: 
type T = A (Int, Int)

val main : Int = case A<>(1, 2) { A<>(x : Int) => x }
OUTPUT: 
Line 3, characters 17-53: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  58-reference.hopix

INPUT: 
val r : Ref<Int> = ref "Wrong"
OUTPUT: 
Line 1, characters 19-30: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  59-assignment.hopix

INPUT: 
val r : Ref<Int> = ref 0

val main : Unit = r := "Wrong"


OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  60-assignment-is-unit.hopix

INPUT: 
val r : Ref<Int> = ref 0

val main : Int = r := 33


OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  61-read.hopix

INPUT: 
val x : Ref<Int> = ref 0

val y : String = !x
OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  62-sequence.hopix

INPUT: 
val x : Ref<Int> = ref 0

val y : Int =
    "Right here";
    "Not what I expected here."
OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  63-for-01.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : String =
    for i = 0 to 10 {
      x := !x + 1
    }

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  64-for-02.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = 0 to 10 {
      "Do that!?"
    }

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  65-for-03.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = 0 to "10" {
      nothing
    }

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  66-for-04.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = "0" to 10 {
      nothing
    }

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  67-for-05.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = 0 to 10 by "1" {
      nothing
    }

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  68-for-06.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = 0 to 10 by 1 {
      nothing
    };
    x := i

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  69-for-07.hopix

INPUT: 
val x : Ref<Int> = ref 0

val main : Unit =
    for i = 0 to 10 by 1 {
      nothing
    };
    x := i

OUTPUT: 
Line 1, characters 19-24: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  70-type-annotation.hopix

INPUT: 
val main : Int = (0 : String)
OUTPUT: 
Line 1, characters 17-29: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  71-anonymous-function.hopix

INPUT: 
val id : Int -> Int = (fun (x) => "Bar" : Int -> Int)
OUTPUT: 
Line 1, characters 22-53: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  72-anonymous-function-02.hopix

INPUT: 
val id : Int -> Int = (fun (x) => 0 : String -> Int)
OUTPUT: 
Line 1, characters 22-52: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  73-while-01.hopix

INPUT: 
val main : Int = while (true) { nothing }
OUTPUT: 
Line 1, characters 17-41: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  74-while-02.hopix

INPUT: 
val main : Unit = while (0) { nothing }
OUTPUT: 
Line 1, characters 18-39: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  75-while-03.hopix

INPUT: 
val main : Unit = while (true) { "Bong!" }
OUTPUT: 
Line 1, characters 18-42: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  76-if-then-else-01.hopix

INPUT: 
val main : Unit =
    if true then 0 else 1
OUTPUT: 
Line 2, characters 4-25: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  77-if-then-else-02.hopix

INPUT: 
val main : Int =
    if true then 0 else "String"
OUTPUT: 
Line 2, characters 4-32: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  78-if-then-else-03.hopix

INPUT: 
val main : Int =
    if true then "String" else 1
OUTPUT: 
Line 2, characters 4-32: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  79-if-then-else-04.hopix

INPUT: 
val main : Int =
    if "String" then 0 else 1
OUTPUT: 
Line 2, characters 4-29: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  80-pattern-01.hopix

INPUT: 
val main : Int =
    case 0 { (x : Int) & (x : String) => x }
OUTPUT: 
Line 2, characters 4-44: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  81-pattern-02.hopix

INPUT: 
val main : Int =
    case 0 { (x : Int) & (y : String) => x }
OUTPUT: 
Line 2, characters 4-44: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  82-pattern-03.hopix

INPUT: 
val main : Int =
    case 0 { (x : Int) | (y : String) => x }
OUTPUT: 
Line 2, characters 4-44: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
[XFAIL]  83-pattern-04.hopix

INPUT: 
val main : Int =
    case 0 { (x : Int) | (x : String) => x }
OUTPUT: 
Line 2, characters 4-44: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
--------------------------------------------------------
./01-unbound-variable.hopix ./02-variable-in-another-scope.hopix ./03-variable-with-another-type.hopix ./04-invalid-arithmetic-operation.hopix ./05-invalid-arithmetic-operation-02.hopix ./06-invalid-arithmetic-operation-03.hopix ./07-invalid-arithmetic-operation-04.hopix ./08-invalid-arithmetic-operation-05.hopix ./09-invalid-arithmetic-comparison.hopix ./10-invalid-arithmetic-comparison-02.hopix ./11-invalid-arithmetic-comparison-03.hopix ./12-invalid-arithmetic-comparison-04.hopix ./13-invalid-arithmetic-comparison-05.hopix ./14-invalid-arithmetic-comparison-06.hopix ./15-invalid-function-call.hopix ./16-invalid-function-call-02.hopix ./17-invalid-function-call-03.hopix ./18-invalid-function-call-04.hopix ./19-invalid-function-call-05.hopix ./20-invalid-function-call-06.hopix ./21-invalid-function-call-07.hopix ./22-invalid-function-call-08.hopix ./23-invalid-function-call-09.hopix ./24-invalid-function-call-10.hopix ./25-invalid-function-call-11.hopix ./26-invalid-function-call-12.hopix ./27-record-01.hopix ./28-record-02.hopix ./29-record-03.hopix ./30-record-04.hopix ./31-record-05.hopix ./32-record-06.hopix ./33-record-07.hopix ./34-record-matching-01.hopix ./35-record-matching-02.hopix ./36-record-matching-03.hopix ./37-record-matching-04.hopix ./38-record-matching-05.hopix ./39-record-matching-06.hopix ./40-record-matching-07.hopix ./41-record-matching-08.hopix ./42-record-field-01.hopix ./43-record-field-02.hopix ./44-record-field-03.hopix ./45-constructor-01.hopix ./46-constructor-02.hopix ./47-constructor-03.hopix ./48-constructor-04.hopix ./49-constructor-05.hopix ./50-constructor-06.hopix ./51-constructor-07.hopix ./52-constructor-08.hopix ./53-constructor-matching-01.hopix ./54-constructor-matching-02.hopix ./55-constructor-matching-03.hopix ./56-constructor-matching-04.hopix ./57-constructor-matching-05.hopix ./58-reference.hopix ./59-assignment.hopix ./60-assignment-is-unit.hopix ./61-read.hopix ./62-sequence.hopix ./63-for-01.hopix ./64-for-02.hopix ./65-for-03.hopix ./66-for-04.hopix ./67-for-05.hopix ./68-for-06.hopix ./69-for-07.hopix ./70-type-annotation.hopix ./71-anonymous-function.hopix ./72-anonymous-function-02.hopix ./73-while-01.hopix ./74-while-02.hopix ./75-while-03.hopix ./76-if-then-else-01.hopix ./77-if-then-else-02.hopix ./78-if-then-else-03.hopix ./79-if-then-else-04.hopix ./80-pattern-01.hopix ./81-pattern-02.hopix ./82-pattern-03.hopix ./83-pattern-04.hopix
BAD: 83/83
SCORE: 100%
make[1]: Leaving directory '/home/opam/source/flap/tests/m3/hopix/typechecker/bad'
make[1]: Entering directory '/home/opam/source/flap/tests/m3/hopix/typechecker/good'
========================================================
In typechecker/good
[ OK ]   01-int-literal.hopix

INPUT:
val x : Int = 42
val y : Int = -42
OUTPUT: 
x : Int
y : Int
EXPECTED: 
x : Int
y : Int
--------------------------------------------------------
[ OK ]   02-arith-01.hopix

INPUT:
val x : Int = 1 + 1
OUTPUT: 
x : Int
EXPECTED: 
x : Int
--------------------------------------------------------
[ OK ]   03-arith-02.hopix

INPUT:
val x : Int = 1 * 2
OUTPUT: 
x : Int
EXPECTED: 
x : Int
--------------------------------------------------------
[ OK ]   04-arith-03.hopix

INPUT:
val x : Int = 1 - 2
OUTPUT: 
x : Int
EXPECTED: 
x : Int
--------------------------------------------------------
[ OK ]   06-arith-04.hopix

INPUT:
val x : Int = 1 / 2
OUTPUT: 
x : Int
EXPECTED: 
x : Int
--------------------------------------------------------
[ OK ]   07-arith-05.hopix

INPUT:
val x : Int = 1 / 2 + 3 * 5 - 6
OUTPUT: 
x : Int
EXPECTED: 
x : Int
--------------------------------------------------------
[ OK ]   08-char-literal.hopix

INPUT:
val c : Char = 'a'
OUTPUT: 
c : Char
EXPECTED: 
c : Char
--------------------------------------------------------
[ OK ]   09-char-string.hopix

INPUT:
val c : String = "Luke, I may be your father!"
OUTPUT: 
c : String
EXPECTED: 
c : String
--------------------------------------------------------
[ KO ]   -->  10-local-definition.hopix

INPUT:
val main : Int =
    val x : Int = 1;
    x
OUTPUT: 
Line 2, characters 4-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
main : Int
--------------------------------------------------------
[ KO ]   -->  11-function-definition.hopix

INPUT:
def id : Int -> Int (x) = x

val main : Int =
    id (42)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
id : Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  12-rec-function-definition.hopix

INPUT:
def id : Int -> Int (x) = id (x)

val main : Int =
    id (42)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
id : Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  13-mutually-rec-fun-definitions.hopix

INPUT:
def double_omega : Int -> Int (x) =
    omega (x)
and omega : Int -> Int (x) =
    double_omega (x)

val main : Int = double_omega (73)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
double_omega : Int -> Int
omega : Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  14-binary-function.hopix

INPUT:
def fst : Int * Int -> Int (x, y) = x

val main : Int = fst (3, 4)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
fst : Int * Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  14-binary-rec-function.hopix

INPUT:
def fst : Int * Int -> Int (x, y) = fst (y, x)

val main : Int = fst (3, 4)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
fst : Int * Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  15-binary-mutually-rec-function.hopix

INPUT:
def fst : Int * Int -> Int (x, y) = snd (y, x)

and snd : Int * Int -> Int (x, y) = fst (x, y)

val main : Int = fst (3, 4)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
fst : Int * Int -> Int
snd : Int * Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  16-polymorphic-function.hopix

INPUT:
def id : forall a. a -> a (x) = x

val main : Int = id<Int> (37)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
id : forall a. a -> a
main : Int
--------------------------------------------------------
[ KO ]   -->  17-polymorphic-binary-function.hopix

INPUT:
def fst : forall a, b. a * b -> a (x, y) = x

val main : Int = fst<Int, Char> (37, 'a')
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
fst : forall a, b. a * b -> a
main : Int
--------------------------------------------------------
[ KO ]   -->  18-polymorphic-recursive-function.hopix

INPUT:
def false_rec : forall a, b. a -> b (x) = false_rec<a, b> (x)

val main : String = false_rec<Int, String>(33)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
false_rec : forall a, b. a -> b
main : String
--------------------------------------------------------
[ KO ]   -->  19-polymorphic-mutually-recursive-functions.hopix

INPUT:
def false_rec : forall a, b. a -> b (x) = false_rec2<b, a> (x)

and false_rec2 : forall a, b. b -> a (x) = false_rec<b, a> (x)

val main : String = false_rec<Int, String> (43)

OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
false_rec : forall a, b. a -> b
false_rec2 : forall b, a. a -> b
main : String
--------------------------------------------------------
[ KO ]   -->  20-polymorphic-binary-function.hopix

INPUT:
def apply : forall a, b. (a -> b) * a -> b (f, x) = f (x)

def curry : forall a, b, c. (a -> b -> c) -> (a * b -> c) (f) =
    def fc : a * b -> c (x, y) = (f (x)) (y);
    fc

def uncurry : forall a, b, c. (a * b -> c) -> (a -> b -> c) (f) =
    def fu : a -> b -> c (x) =
      (def g : b -> c (y) = f (x, y);
      g);
    fu

def id_int : Int -> Int (x) = x

val main : Int =
   (curry<Int -> Int, Int, Int> (uncurry<Int -> Int, Int, Int> (apply<Int, Int>))) (id_int, 37)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
apply : forall a, b. (a -> b) * a -> b
curry : forall a, b, c. (a -> (b -> c)) -> (a * b -> c)
uncurry : forall a, b, c. (a * b -> c) -> (a -> (b -> c))
id_int : Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  21-record-01.hopix

INPUT:
type P = { x : Int; y : Int }
val x : P = { x = 0; y = 1 }<>
OUTPUT: 
Line 2, characters 12-30: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : P
--------------------------------------------------------
[ KO ]   -->  22-polymorphic-record.hopix

INPUT:
type P <a> = { x : a; y : a }
val x : P <Int> = { x = 0; y = 1 }<Int>
OUTPUT: 
Line 2, characters 18-39: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : P<Int>
--------------------------------------------------------
[ KO ]   -->  23-polymorphic-record-02.hopix

INPUT:
type P <a, b> = { x : a; y : b }
val x : P <Int, String> = { x = 0; y = "River Song" }<Int, String>
OUTPUT: 
Line 2, characters 26-66: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : P<Int, String>
--------------------------------------------------------
[ KO ]   -->  24-record-proj.hopix

INPUT:
type P = { x : Int; y : String }

val p : P = { x = 42; y = "Dalek" }<>

val px : Int = p.x

val py : String = p.y
OUTPUT: 
Line 3, characters 12-37: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
p : P
px : Int
py : String
--------------------------------------------------------
[ KO ]   -->  25-polymorphic-record-proj.hopix

INPUT:
type P<a, b> = { x : a; y : b }

val p : P<Int, String> = { x = 0; y = "Rose Tyler" }<Int, String>

val x : Int = p.x

val y : String = p.y
OUTPUT: 
Line 3, characters 25-65: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
p : P<Int, String>
x : Int
y : String
--------------------------------------------------------
[ KO ]   -->  26-function-over-polymorphic-record.hopix

INPUT:
type P<a, b> = { x : a; y : b }

def get_x : forall a, b. P<a, b> -> a (p) = p.x

def get_y : forall a, b. P<a, b> -> b (p) = p.y

val p : P<Int, String> = { x = 37; y = "Rory Williams" }<Int, String>

val x : Int = get_x<Int, String>(p)

val y : String = get_y<Int, String>(p)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
get_x : forall a, b. P<a, b> -> a
get_y : forall a, b. P<a, b> -> b
p : P<Int, String>
x : Int
y : String
--------------------------------------------------------
[ KO ]   -->  27-function-in-record.hopix

INPUT:
type F<a, b> = { apply : a -> b }

def f : Int -> Int (x) = x + 1

val boxed_f : F<Int, Int> = { apply = f }<Int, Int>

def apply_boxed_f : forall a, b. F<a, b> * a -> b (boxed_f, a) = boxed_f.apply (a)

val main : Int = apply_boxed_f<Int, Int>(boxed_f, 42)
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
f : Int -> Int
boxed_f : F<Int, Int>
apply_boxed_f : forall a, b. F<a, b> * a -> b
main : Int
--------------------------------------------------------
[ KO ]   -->  28-anonymous-function.hopix

INPUT:
val succ : Int -> Int = (fun (x) => x + 1 : Int -> Int)

val main : Int = succ (0)
OUTPUT: 
Line 1, characters 24-55: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
succ : Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  29-anonymous-nary-functions.hopix

INPUT:
val apply : (Int -> Int) * Int -> Int =
    (fun (f, x) => f (x) : (Int -> Int) * Int -> Int)

def succ : Int -> Int (x) = x + 1

val apply2 : (Int * Int -> Int) * Int * Int -> Int =
    (fun (f, x, y) => f (x, y) : (Int * Int -> Int) * Int * Int -> Int)

def addmul : Int * Int -> Int (x, y) = x * y + y * x

val apply3 : (Int * Int * Int -> Int) * Int * Int * Int -> Int =
    (fun (f, x, y, z) => f (x, y, z) : (Int * Int * Int -> Int) * Int * Int * Int -> Int)

def conj : Int * Int * Int -> Int (x, y, z) = x * y * z

val main : Int =
    apply (succ, -1) +
    apply2 (addmul, 3, 7) +
    apply3 (conj, 0, 1, 2)




OUTPUT: 
Line 2, characters 4-53: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
apply : (Int -> Int) * Int -> Int
succ : Int -> Int
apply2 : (Int * Int -> Int) * Int * Int -> Int
addmul : Int * Int -> Int
apply3 : (Int * Int * Int -> Int) * Int * Int * Int -> Int
conj : Int * Int * Int -> Int
main : Int
--------------------------------------------------------
[ KO ]   -->  30-anonymous-third-order.hopix

INPUT:
val fix0 : forall a, b. ((a -> b) -> (a -> b)) * a * b -> b =
    ((fun (f, a, b) => (f (((fun (x) => b) : a -> b))) (a))
     : ((a -> b) -> (a -> b)) * a * b -> b)
OUTPUT: 
Line 2, characters 4-103: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
fix0 : forall a, b. ((a -> b) -> (a -> b)) * a * b -> b
--------------------------------------------------------
[ KO ]   -->  31-constructor.hopix

INPUT:
type Color = Red | Blue | Green

val red   : Color = Red<>
val blue  : Color = Blue<>
val green : Color = Green<>
OUTPUT: 
Line 3, characters 20-25: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
red : Color
blue : Color
green : Color
--------------------------------------------------------
[ KO ]   -->  32-constructor-with-data.hopix

INPUT:
type Option = Some (Int) | None

val none : Option = None<>

val some42 : Option = Some<> (42)
OUTPUT: 
Line 3, characters 20-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
none : Option
some42 : Option
--------------------------------------------------------
[ KO ]   -->  33-constructor-with-multiple-data.hopix

INPUT:
type IPair = `(Int, Int)

val a_pair_of_int : IPair = `<>(0, 1)
OUTPUT: 
Line 3, characters 28-37: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
a_pair_of_int : IPair
--------------------------------------------------------
[ KO ]   -->  34-recursive-datatype.hopix

INPUT:
type L = N | C (Int, L)

val a_list : L = C<> (1, C<> (2, C<> (3, N<>)))
OUTPUT: 
Line 3, characters 17-47: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
a_list : L
--------------------------------------------------------
[ KO ]   -->  35-recursive-datatype-02.hopix

INPUT:
type T = N | `(T, T)

val leaf : T = N<>

val a_tree : T = `<> (`<> (`<> (leaf, leaf), `<>(leaf, `<>(leaf, leaf))), leaf)
OUTPUT: 
Line 3, characters 15-18: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
leaf : T
a_tree : T
--------------------------------------------------------
[ KO ]   -->  36-recurse-datatype-embedding-functions.hopix

INPUT:
type S = C (Int, Unit -> S)

def from : Int -> S (n) = C<> (n, (fun (u) => from (n + 1) : Unit -> S))
OUTPUT: 
Fatal error: exception "Assert_failure src/hopix/hopixTypechecker.ml:97:23"
EXPECTED: 
from : Int -> S
--------------------------------------------------------
[ KO ]   -->  37-pattern-matching-01.hopix

INPUT:
type T = T

val t : T = case T<> { T<> => T<> }

OUTPUT: 
Line 3, characters 12-35: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
t : T
--------------------------------------------------------
[ KO ]   -->  38-pattern-matching-02.hopix

INPUT:
type T = T

val t : T = case T<> { (x : T) => x }

OUTPUT: 
Line 3, characters 12-37: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
t : T
--------------------------------------------------------
[ KO ]   -->  39-pattern-matching-03.hopix

INPUT:
type C = A | B

val main : Int = case A<> { A<> => 0 | B<> => 1 }
OUTPUT: 
Line 3, characters 17-49: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
main : Int
--------------------------------------------------------
[ KO ]   -->  40-pattern-matching-04.hopix

INPUT:
type Option = None | Some (Int)

val x : Int = case Some<>(42) { Some<>(x : Int) => x | None<> => 0 }
OUTPUT: 
Line 3, characters 14-68: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  41-pattern-matching-05.hopix

INPUT:
type Option<a> = None | Some (a)

val x : Int = case Some<Int>(42) { Some<Int>(x : Int) => x | None<Int> => 0 }
OUTPUT: 
Line 3, characters 14-77: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  42-pattern-matching-06.hopix

INPUT:
type Option<a> = None | Some (a)

val x : Int = case Some<Int>(42) { Some<Int>(_ : Int) | None<Int> => 0 }
OUTPUT: 
Line 3, characters 14-72: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  43-pattern-matching-07.hopix

INPUT:
type Or<a, b> = Left(a) | Right(b)

val x : Int = case Left<Int, Int>(22) {
  Left<Int, Int>(x : Int) | Right<Int, Int>(x : Int) => x
}
OUTPUT: 
Line 3, characters 14-99: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  44-pattern-matching-08.hopix

INPUT:
type `<a, b> = `(a, b)

val x : Int = case `<Int, Int>(22, 33) {
  `<Int, Int>(x : Int, y : Int) => x + y
}
OUTPUT: 
Line 3, characters 14-83: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  45-pattern-matching-09.hopix

INPUT:
type `<a, b> = `(a, b)

val x : Int = case `<`<Int, Int>, Int>(`<Int, Int>(22, 44), 33) {
  `<`<Int, Int>, Int>(`<Int, Int>(x : Int, y : Int), _ : Int) => x + y
}
OUTPUT: 
Line 3, characters 14-138: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  46-pattern-matching-10.hopix

INPUT:
type `<a, b> = `(a, b)

val x : Int = case `<Int, Int>(22, 33) {
  `<Int, Int>(x : Int, _ : Int) & `<Int, Int>(_ : Int, y : Int) => x + y
}
OUTPUT: 
Line 3, characters 14-115: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  47-pattern-matching-11.hopix

INPUT:
type `<a, b> = `(a, b)
type P = { l : Int }

val x : Int = case `<P, Int>({ l = 22 }<>, 33) {
  `<P, Int>( { l = x : Int }<>, (y : Int)) => x + y
}
OUTPUT: 
Line 4, characters 14-102: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  48-pattern-matching-12.hopix

INPUT:
val x : Int = case 3 { 0 => 1 | (_ : Int) => 0 }
OUTPUT: 
Line 1, characters 14-48: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  49-pattern-matching-13.hopix

INPUT:
val x : Int = case "Doctor" { "Doctor" => 1 | (_ : String) => 0 }
OUTPUT: 
Line 1, characters 14-65: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  50-pattern-matching-14.hopix

INPUT:
val x : Int = case 'x' { 'x' => 1 | (_ : Char) => 0 }
OUTPUT: 
Line 1, characters 14-53: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Int
--------------------------------------------------------
[ KO ]   -->  51-ref.hopix

INPUT:
val x : Ref<Int> = ref (0)
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
--------------------------------------------------------
[ KO ]   -->  52-assign.hopix

INPUT:
val x : Ref<Int> = ref (0)

val main : Unit =
    x := 1
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
main : Unit
--------------------------------------------------------
[ KO ]   -->  53-read.hopix

INPUT:
val x : Ref<Int> = ref (0)

val main : Int =
    !x
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
main : Int
--------------------------------------------------------
[ KO ]   -->  54-sequence.hopix

INPUT:
val x : Ref<Int> = ref (0)

val main : Int =
    x := 1;
    !x
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
main : Int
--------------------------------------------------------
[ KO ]   -->  55-while.hopix

INPUT:
val x : Ref<Int> = ref (4)

val main : Int =
    while (!x >? 0) {
      x := !x - 1
    };
    !x
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
main : Int
--------------------------------------------------------
[ KO ]   -->  56-for.hopix

INPUT:
val x : Ref<Int> = ref (4)

val main : Int =
    for i = 0 to 30 by 3 {
      x := !x + 1
    };
    !x
OUTPUT: 
Line 1, characters 19-26: Error (typechecking)
  check_expression_is_fully_annotated : non-exhaustive pattern matching
EXPECTED: 
x : Ref<Int>
main : Int
--------------------------------------------------------
GOOD: 8/56
SCORE: 14%

BAD: 0/0
make[1]: Leaving directory '/home/opam/source/flap/tests/m3/hopix/typechecker/good'
--------------------------------------------------------
Global results:
BAD:   83 / 83
GOOD:  8 / 56
SCORE: 65%
--------------------------------------------------------
make: Leaving directory '/home/opam/source/flap/tests/m3'
